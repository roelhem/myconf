;;; myconf-flake.el --- Description -*- lexical-binding: t; -*-
;;
;; Copyright (C) 2024 Roel Hemerik
;;
;; Author: Roel Hemerik <roel@shared.nl>
;; Maintainer: Roel Hemerik <roel@shared.nl>
;; Created: October 19, 2024
;; Modified: October 19, 2024
;; Version: 0.0.1
;; Keywords: abbrev bib c calendar comm convenience data docs emulations extensions faces files frames games hardware help hypermedia i18n internal languages lisp local maint mail matching mouse multimedia news outlines processes terminals tex tools unix vc wp
;; Homepage: https://github.com/roel/myconf-flake
;; Package-Requires: ((emacs "29.1"))
;;
;; This file is not part of GNU Emacs.
;;
;;; Commentary:
;;
;;  Description
;;
;;; Code:

(defvar myconf-flake--inputs-attrs nil
  "Information about the inputs of the ~/.myconf nix-flake.

Value is an alist where the keys are the inputs (as symbols)
and the value an alist that map properties to names.

The value is usually set by a separate definition file that is
generated by nix.")


(defun myconf-flake--input-attr (input attrkey &optional default)
  "The value of ATTRKEY for flake input INPUT.

Useds DEFAULT if the INPUT or ATTRKEY does not exist"
  (let ((k (if (stringp input) (intern input) input)))
    (alist-get attrkey
               (alist-get k
                          myconf-flake--inputs-attrs
                          default)
               default)))

(defun myconf-flake-input-find-file (input)
  "Find a file in the source of an INPUT of the ~/.myconf flake."
  (interactive (list (completing-read
                      "Select ~/.myconf nix-flake input: "
                      myconf-flake--inputs-attrs nil t)))
  (let ((default-directory (concat (myconf-flake--input-attr input 'out-path) "/")))
    (call-interactively 'find-file)))

(defun myconf-flake-input-show-nix-store-path (input)
  ""
  (interactive (list (completing-read
                      "Select ~/.myconf nix-flake input: "
                      myconf-flake--inputs-attrs nil t)))
  (nix-store-show-path (myconf-flake--input-attr input 'out-path)))


(provide 'myconf-flake)
;;; myconf-flake.el ends here
